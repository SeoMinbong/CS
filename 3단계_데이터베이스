1. 데이터베이스 개요	
	가. 파일시스템과 데이터베이스 시스템	
		1. 데이터 독립성	
		2. 데이터 중복성	
		3. 무결성	
		4. 동시 액세스 문제	
	나. 데이터베이스의 특징	
		1. 데이터베이스 시스템의 자기 기술성	
		2. 프로그램과 데이터의 격리 및 추상화	
		3. 다중 뷰 제공	
		4. 데이터 공유와 다수 사용자 트랜잭션 처리	
	다. 데이터 모델	
		1. 데이터 모델과 데이터 모델링	
		2. 스키마와 인스턴스	
		3. 데이터의 모델링	
	라. 데이터베이스 사용자	
		1. 데이터베이스 관리자	
		2. 최종 사용자	
		3. 시스템분석가 및 응용프로그래머	
	마. 데이터베이스 사용	
		1. 데이터베이스 사용의 장점	
		2. 데이터베이스 사용의 단점	
		3. 데이터베이스를 사용하지않아도 좋은 경우	
2. 데이터베이스 시스템	
	가. 데이터베이스 시스템 구조	
		1. 데이터베이스 시스템의 3단계 구조	
		2. 외부 단계	
		3. 개념 단계	
		4. 내부 단계	
		5. 각 단계 간의 접속	
	나. 데이터베이스 관리 시스템		
	다. 데이터베이스 관리 시스템의 구성요소		
	라. 데이터베이스 관리 시스템의 프로그램 처리 절차		
	마. 사용자 접속	
		1. 스키마와 서브스키마	
		2. 사용자 접속	
		3. 데이터베이스 관리자 기능	
	바. 데이터 언어	
		1. 데이터 정의 언어	
		2. 데이터 조작 언어	
3. 개체 관계 모델링	
	가. 데이터베이스 설계 개요 	
		1. 프로세스 중심 설계 및 데이터 중심 설계	
		2. 데이터베이스 설계 과정	
	나. E-R 모델의 개념	
		1. 모델링 도구	
		2. E-R 다이아그램의 표기법	
	다. E-R 모델의 예	
		1. 병원 시스템의 설계	
		2. 회사 시스템의 예	
4. 관계 데이터베이스	
	가. 관계모델	
		1. 기본개념	
		2. 릴레이션의 개념	
		3. 관계 데이터모델의 제약조건	
	나. 관계연산 정의		
	다. 관계대수 연산	
		1. 릴레이션에 대한 집합 연산	
		2. 프로젝션	
		3. 셀렉션	
		4. 조인	
		5. 디비전	
		6. 집계함수	
		7. 관계대수 질의의 예	
		8. 관계제약의 대수적 표현	
	라. 관계해석	
		1. 튜플 관계형 해석	
		2. 영역 관계형 해석	
5. SQL 언어	
	가. 데이터 정의	
		1. 기본 테이블	
		2. 색인	
	나. 데이터 조작	
		1. 단순 질의	
		2. 조인 질의	
		3. 집계 함수	
		4. 기타 기능	
		5. 갱신 연산	
	다. 뷰	
		1. 개요	
		2. 뷰정의	
		3. 뷰에 관한 DML 연산	
		4. 뷰의 구현	
6. 질의처리 및 최적화	
	가. 간단한 질의 최적화의 예		
	나. 질의 최적화 과정		
	다. 질의 변환규칙		
	라. 비용계산을 통한 질의 최적화	
		1. 카달로그 정보의 이용	
		2. 선택연산에 대한 비용 계산 함수의 예	
		3. 조인연산에 대한 비용 계산 함수의 예	
	마. 경험적 규칙을 통한 최적화의 예		
7. 정규화	
	가. 정규화 필요성		
	나. 함수적 종속성		
	다. 기본 정규형	
		1. 제1정규형	
		2. 제2정규형	
		3. 제3정규형	
		4. BCNF	
		5. 정규화의 예	
		6. 기본 정규형의 정리	
	라. 진보된 정규형	
		1. 다중치 종속과 제4정규형	
		2. 제5정규형	
	마. 정규형간의 관계		
8. 회복	
	가. 장애와 회복		
	나. 저장 연산		
	다. 데이터베이스 로그		
	라. 로그를 이용한 회복	
		1. 지연 갱신 회복	
		2. 즉시 갱신 회복	
	마. 검사시점 회복		
	바. 그림자 페이징기법		
	사. 백업과 미디어 회복		
9. 동시성 제어	
	가. 트랜잭션과 직렬화		
	나. 직렬성 검사		
	다 .로킹		
	라. 타임스탬프 순서 기법		
	마. 검증 기법		
	바. 다중버전 기법		
	사. 교착상태 처리	
		1. 교착상태 탐지	
		2. 교착상태 검출과 회복	
10. 객체 데이터베이스와 객체-관계 데이터베이스	
	가. 객체지향 데이터 모델		
			
	나. 객체 연산		
	다. 객체지향 질의		
	라. 객체-관계 데이터베이스	
		1. 객체-관계 개념	
		2. SQL3의 특징	
		3. 중첩관계 데이터 모델	
	마. ODBMS와 ORDBMS의 비교		
1
		1. 데이터베이스 응용	
	가. 클라이언트/서버 데이터베이스	
		1. 클라이언트/서버의 구조	
		2. 클라이언트/서버의 원리	
		3. 클라이언트/서버 구조의 유형	
		4. 클라이언트/서버 데이터베이스 구현 사례	
	나. 웹 데이터베이스	
		1. 인터넷 기술과 데이터베이스	
		2. 인트라넷과 익스트라넷	
		3. 웹 데이터베이스 고려사항	
		4. 웹 데이터베이스 구현 기술	
	다. 데이터 웨어하우스	
		1. 데이터 웨어하우스의 개념과 특징	
		2. 다차원 데이터 모델	
		3. 다차원 집계 질의	
		4. OLAP 구현 기법	
	라. 멀티미디어 데이터베이스	
		1. 기본 개념	
		2. 멀티미디어 데이터의 저장 및 관리	
		3. 매체 데이터의 검색	
		4. 이미지 및 음성 데이터베이스의 응용 예	
	마. 모바일 데이터베이스	
		1. 모바일 컴퓨팅의 구조와 특성	
		2. 모바일 질의 처리	
		3. 모바일 데이터 관리의 문제점	
	바. 지리정보 데이터베이스	
		1. 지리정보 시스템의 데이터 관리 요건	
		2. 지리정보 데이터 연산	
		3. GIS 데이터베이스 기능	
		4. GIS 응용분야	


 
시험 문제 예시 


		1. 데이터베이스의 특징이 아닌 것은?
① 동시 공용(concurrent sharing)?
②?계속적인 변화(continuous evolution)
③ 실시간 접근성(real-time accessibility)?
④?물리 주소에 의한 참조(address reference)
 [정답] ④ 

2. 관계 모형에서 모든 튜플을 유일하게 구별할 수 있는 특성은? 
① 기본키          ② 외래키          ③ 후보키          ④ 보조키 
[정답] ① 

3. 다음 중 질의어(Query language)에 관한 설명으로 부적합한 것은? 
① 주로 터미널에서 일반 사용자가 대화식으로 사용 
② 언어의 성질상 반드시 단독적(stand-alone)이어야 한다. 
③ 질의어는 비절차적(non-procedural)이고, 완전한 자료 처리 기능을 갖춘 언어다. 
④ 질의어는 자료의 검색, 데이터의 조작 및 정의 등의 기능을 갖는다. 
[정답] ② 

4. 데이터베이스 관리시스템의 동시성 제어 기능이 제공하는 것은?
① 다중 뷰(view)?
②?데이터의 추상화
③ 다수 사용자의 트랜잭션 처리 ?
④ 데이터베이스 시스템의 자기 기술성 ?
[정답] ③ 

5. 다음 중 정규화를 시켜주는 이유에 대한 설명으로 바른 것은? 
① 정규화된 데이터는 크기가 작다. 
② 정규화된 데이터의 저장이 더 간편하다. 
③ 정규화된 데이터는 이상(anomaly)이 적게 일어난다. 
④ 데이터를 정규화시켜서 저장하면 테이블의 개수가 줄어든다. 
[정답] ③

6.?두 릴레이션에서 어느 한쪽 또는 양쪽에 있는 모든 투플을 구하는 관계 대수 연산은?
①?조인 	?②?합집합		 ?	③?교집합		④?차집합 ?
 [정답] ②

7.?다음에서 설명하는 방법은?
교착상태를 회복시키기 위해 교착상태의 트랜잭션 집합에서 최소의 비용이 드는 트랜잭션을 선정하여 복귀시킨다.
① 에러 복구 ?				② 로그 레코드 ?
③?체크 포인트				④ 희생자 선정 ?
 [정답] ④

8. 데이터베이스 시스템의 3단계 스키마(schema)를 쓰시오.
[정답]     외부 스키마,  개념 스키마,   내부 스키마

9. 다음의 테이블에서 월급이 평균보다 많은 사람의 이름과 월급을 구하는 SQL문을 쓰시오.


월급
사원번호	이름	월급	부서코드
1	홍길동	100	컴퓨터
2	성춘향	200	전자
3	연놀부	300	전기
4	연흥부	200	1
5	김연수	200	3

[정답] SELECT 이름, 월급 FROM 월급 WHERE 월급 >(SELECT AVG(월급) FROM 월급)


10. 다음에서 설명하는 용어를 쓰시오.
관계 데이터 모델에서 속성들을 갖는 2차원의 테이블을 (  ㉠  ), 테이블의 각 열을 (  ㉡  ), 각 행을 (   ㉢   )(이)라고 한다.
[정답]   ㄱ: 릴레이션
             ㄴ: 속성 또는 필드
             ㄷ: 레코드 또는 튜플

