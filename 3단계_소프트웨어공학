1. 소프트웨어 공학 개념	
	가. 소프트웨어 공학이란?		
	나. 소프트웨어의 특성		
	다. 소프트웨어 위기		
	라. 소프트웨어 프로세스와 품질	
		1. ISO 12207 표준	
		2. CMMI 모델	
		3. SPICE 모델	
	마. 소프트웨어 개발 모델	
		1. 선형순차(폭포수) 모델	
		2. 점증적 모델	
		3. 나선형 모델	
		4. 컴포넌트기반 개발 모델	
		5. 4GT 모델	
		6. UP 모델	
		7. XP 모델 	
	바. 소프트웨어 프로젝트 관리	
		1. 프로젝트관리의중요성	
		2. 프로젝트관리 모델	
		3. 위험관리	
		4. 형상관리	
2. 소프트웨어 프로젝트 계획	
	가. 프로젝트 계획수립의 목적		
	나. 소프트웨어 범위		
	다. 소프트웨어 프로젝트자원	
		1. 인적 자원	
		2. 재사용 가능 소프트웨어 자원	
		3. 환경 자원	
	라. 소프트웨어 프로젝트 추정	
		1. 비용과 노력추정 모델 (경험적 추정, 델파이, 코코모, 기능점수)	
		2. 업무 분해기술 (WBS)	
		3. 자동추정도구	
	마. 소프트웨어 프로젝트 일정 계획	
		1. 인간-작업 관계	
		2. 업무정의 및 분배	
		3. 일정계획 방법	
	바. 조직계획		
	사. 소프트웨어 프로젝트 계획서 작성		
3. 소프트웨어 품질보증 및 품질평가	
	가. 소프트웨어 품질과 
품질보증	
		1. 소프트웨어 품질요인들	
		2. 품질보증과 품질비용	
		3. 소프트웨어 품질보증
활동	
		4. 소프트웨어 품질평가	
	나. 소프트웨어 검토	
		1. 소프트웨어 오류의 비용 영향	
		2. 결함증폭과 제거	
	다. 정형적 기술검토	
		1. 검토회의	
		2. 검토보고와 기록보존	
		3. 검토지침	
	라. 소프트웨어 신뢰도	
		1. 소프트웨어 신뢰도 예측모델	
		2. 소프트웨어 안전성과 
위험분석	
	마. SQA 계획		
	바. ISO 9000 표준	
		1. 품질보증 시스템에 대한 ISO 접근법	
		2. ISO 9001 표준	
4. 요구사항 분석모델과 기법	
	가. 분석모델의 요소		
	나. 데이터 모델링	
		1. 데이터 객체,속성,관계	
		2. 개체-관계 다이어그램	
	다. 기능 모델링	
		1. 데이터 흐름도	
		2. 데이터 흐름도의 확장	
	라. 행위 모델링	
		1. 상태전이도	
		2. 상태전이도 작성	
	마. 구조적 분석 단계들	
		1. ERD 생성	
		2. 데이터 흐름 모델의 생성	
		3. 제어 흐름 모델 생성	
		4. 제어 명세	
		5. 프로세스(소단위) 명세	
		6. 데이터 사전	
	바. 소프트웨어 요구사항 
명세		
5. 소프트웨어 설계의 기본원칙	
	가. 소프트웨어 설계의 중요성		
	나. 설계 프로세스		
	다. 설계개념	
		1. 추상화	
		2. 단계적 정제	
		3. 모듈성	
		4. 정보은닉	
		5. 소프트웨어 구조	
		6. 제어계층구조	
		7. 구조적 분할	
		8. 데이터 구조	
	라. 모듈의 효율적 설계	
		1. 기능적 독립성	
		2. 응집도	
		3. 결합도	
	마. 설계 평가		
	바. 설계문서화		
6. 소프트웨어 설계방법	
	가. 데이터 설계		
	나. 아키텍처 설계		
	다. 인터페이스 설계		
	라. 프로시저 설계	
		1. 구조적 프로그래밍	
		2. 그래픽 설계 표기법	
		3. 테이블 설계 표기법	
		4. 프로그램 설계언어	
7. 소프트웨어 구현	
	가. 프로그래밍언어선택		
	나. 코딩기법과 스타일		
	다. 코드 문서화		
8. 소프트웨어 테스팅 기법	
	가. 소프트웨어 테스트 
기본 개념		
	나. 테스트 케이스 설계		
	다. 화이트박스 테스트		
	라. 기본 경로 테스팅	
		1. 흐름 그래프 기법	
		2. 순환 복잡도	
		3. 테스트 케이스	
		4. 그래프 행렬	
	마. 루프 테스팅		
	바. 블랙박스 테스팅	
		1. 균등분할	
		2. 경계값 분석	
	사. 코드 인스펙션 및 정적분석		
	아. 동적분석		
9. 소프트웨어 테스트 전략	
	가. 소프트웨어 테스트의 
전략적 접근방법	
		1. 검증과 확인	
		2. 소프트웨어 테스팅 조직	
		3. 소프트웨어 테스트 전략	
	나. 단위 테스트	
		1. 단위 테스트의 고려사항	
		2. 단위 테스트 절차	
	다. 통합 테스트	
		1. 하향식 통합	
		2. 상향식 통합	
		3. 연쇄식 통합	
		4. 빅뱅 통합	
	라. 확인 (인수) 테스트	
		1. 확인 테스트 매트릭스	
		2. 형상검토	
		3. 알파 테스트 베타 테스트	
	마. 시스템 테스트	
		1. 회복 테스트	
		2. 보안 테스트	
		3. 강도 테스트	
		4. 성능 테스트	
	바. 디버깅 기교	
		1. 디버깅 과정	
		2. 디버깅 접근방법	
10. 소프트웨어 유지보수	
	가. 소프트웨어 유지보수의 정의		
	나. 유지보수의 특성	
		1. 구조화된 유지보수	
		2. 유지보수비용	
		3. 유지보수의 문제점	
	다. 유지보수성	
		1. 유지보수성의 제어요인들	
		2. 유지보수성의 정량적 측정	
		3. 검토	
	라. 유지보수의 부작용	
		1. 코딩 부작용	
		2. 데이터 부작용	
		3. 문서 부작용	
1
		1. 객체지향 분석과 설계	
	가. 객체지향 개발 생명주기	
		1. 객체지향 분석과 설계 프로세스	
		2. 객체지향 코딩과 테스팅	
	나. UML의 개념		
	다. Use-case 모델링	
		1. Use-case 다이어그램의 
개발	
		2. Use-case들 사이의 
관계	
		3. Use-case 
다이어그래밍 예	
	라. 객체 모델링 
: 클래스 다이어그램	
		1. 객체와 클래스	
		2. 연산타입	
		3. 연관성(association)
표현	
		4. 연관성 클래스의 표현	
		5. 파생속성,파생 연관성,파생역할의 표현	
		6. 일반화의 표현	
		7. 상속성과 오버라이딩의 해석	
		8. 다중 상속성 표현	
		9. 조립화 표현	
		10. 비즈니스 규칙	
	마. 동적모델링 
	
		1. 시퀸스 다이어그램	
		2. 상태 다이어그램	
		3. 활동 다이어그램	
	바. 분석 대 설계		
	사. 디자인 패턴		
12. 소프트웨어 공학의 
최근동향	
	가. CASE	
		1. CASE 도구의 분류	
		2. 그래픽 모델링	
		3. CASE 저장소	
		4. 재공학 CASE 도구	
		5. 통합 CASE 환경	
	나. 소프트웨어 재사용	
		1. 재사용의 장점	
		2. 재사용 도입의 문제점	
		3. 재사용 프로세스	
		4. 도메인 공학	
		5. 재사용 가능 컴포넌트 구축	
	다. 소프트웨어 재공학	
		1. 소프트웨어 유지보수의 특성	
		2. 소프트웨어 재공학의 
필요성	
		3. 소프트웨어 재공학 
프로세스 모델	
		4. 역공학	
		5. 재구성	
		6. 순공학	
	라. 웹서비스와 SOA	
		1. SOA의 개요	
		2.웹서비스와 SOA의 구현	
		3. SOA의 구조 	


시험 문제 예시 


		1.?폭포수 모델(waterfall model)에 대한 설명으로 옳은 것은?
①	점진적인 개발 모형이다.
②	각 단계의 구별이 명확하지 않다.
③	요구사항이 명확하지 않을 경우에 사용한다.?
④	선형 순차 모델(linear sequential model)이라고도 부른다.?
 [정답] ④ 

2. 소프트웨어 요구 사항 명세를 작성하기 위한 구조적 분석 기법 중 성질이 다른 것은? 
① DFD                               ② SAPT 
③ minispec                           ④ Data Dictionary 
[정답] ② 

3.?소프트웨어 설계 지침으로 옳지 않은 것은?
① 이식성을 고려한다.?
② 결합도를 줄이고 응집도를 높인다.?
③ 자료 결합보다 내용 결합이 되도록 설계한다.?
④ 모듈 간의 접속 관계를 분석하여 복잡도와 중복을 줄인다.?
[정답] ③

4. 캡슐화와 정보은닉의 장점에 해당되지 않는 것은? 
① 모듈화를 촉진시키고, 일관성이 보장된다. 
② 내부 데이터 변화에 대해 외부 객체에 영향이 없다. 
③ 이식성과 확장성이 매우 높아진다. 
④ 캡슐화된 내부 정보도 외부에서 직접적 접근이 가능하다. 
[정답] ④ 

5. 다음 중 객체 지향 설계 방법의 장점과 거리가 먼 것은? 
① 집약적이고 재사용성이 높다. 
② 시스템 수정에 융통성이 높다. 
③ 공동 작업하는 데는 다소 불편하다. 
④ 실세계 묘사로 설계 내용을 이해하기 쉽다. 
[정답] ③ 

6.?모듈 간에 상호 의존하는 정도를 의미하는 것은?
① 추상화				②?결합도
③?응집도				④ 기능적 독립성 ?
 [정답] ②

7. 블랙박스 테스트에 대한 설명으로 옳지 않은 것은?
①?시스템의 입력과 출력을 파악한다.
② 모듈이 완전히 작성되어 있지 않더라고 가능하다.?
③ 균등 분할(equivalence partitioning) 기법을 사용한다.?
④?프로시저 설계의 제어구조를 사용하여 테스트 케이스를 결정한다.
 [정답] ④

8. 다음 (     ) 안에 들어갈 내용을 순서대로 쓰시오.
(  ㉠  ) 테스트는 프로그램이 수행하는 기능에 초점을 가지고 테스트하는 방법으로 프로그램의 내부 구조는 다루지 않는다. (  ㉡  ) 테스트는 모듈 안의 작동을 자세히 관찰하는 방법으로 모듈의 논리적인 구조를 체계적으로 점검한다.
[정답] ㉠ 블랙박스, ㉡ 화이트박스


9. 기능 중심 척도인 FP의 장점을 쓰시오.
[정답] 
		1. 프로그래밍 언어와는 독립적이어서 일반언어나 비절차적 언어를 이용한 응용들에 대해 이상적이다. 
2. 프로젝트 개발 초기에 쉽게 알려질 수 있는 데이터를 기초로 한다.

10. 다음 (     ) 안에 들어갈 내용을 순서대로 쓰시오.
(   ㉠   )은/는 유지보수성을 높이기 위해 기존 소프트웨어를 재구성하고 새로운 기술을 적용하는 기술이고, (   ㉡   )은/는 소스코드로부터 설계 및 분석 정보를 생성하는 기술로 일종의 설계 회복 프로세스이다.

[정답] ㉠ SW 재공학(reengineering)  ㉡ SW 역공학(reverse engineering)
